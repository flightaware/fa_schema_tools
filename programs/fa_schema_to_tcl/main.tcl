#
# Program to dump info about tables and indices for a database, into a format
# that can be sourced back into tcl and will create a nested hierachy of
# namespaces and arrays representing tables and fields and indexes within
# tables
#

package require pggrok

proc load_database_metadata {db} {
    puts "# autogenerated by fa_schema_to_tcl on [clock format [clock seconds]]"
    puts ""
    puts "# tables - list of tables"
    set tables [::pggrok::tables $db]
    puts "set tables [list [lsort $tables]]"
    puts ""
    puts "# sequences - list of sequences"
    puts "set sequences [list [lsort [::pggrok::sequences $db]]]"
    puts ""

    foreach table $tables {
	puts "# TABLE $table"
	puts "namespace eval $table {"

	puts "    # fields"
	puts "    namespace eval fields {"
	set fields ""
	::pggrok::table_attributes $db $table field {
	    set name "$field(attname)"
	    unset field(attname)
	    puts "    array set $name [list [array get field]]"
	    lappend fields $name
	}
	puts "    }"
	puts ""
	puts "    set fields [list $fields]"
	puts ""

	puts "    # indices"
	puts "    namespace eval indices {"
	set indices ""
	::pggrok::indices $db $table index {
	    set name "$index(relname)"
	    unset index(relname)
	    puts "    array set $name [list [array get index]]"
	    lappend indices $name
	}
	puts "    }"
	puts ""
	puts "    set indices [list $indices]"
	puts ""

	puts "}; # end of TABLE $table"
	puts ""
    }
}

proc usage {} {
    puts stderr "usage: $::argv0 db connect pairs"
    puts stderr "example: $::argv0 dbname mydatabase host dbhost.foo.com user karl password mypassword"
    exit 1
}

proc main {argv} {
    if {$argv == ""} usage
    set db [pg_connect -connlist $argv]
    load_database_metadata $db
    pg_disconnect $db
}

#package require Tclx
#cmdtrace on

if !$tcl_interactive {main $argv}
